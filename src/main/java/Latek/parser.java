
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 05 12:09:01 CET 2015
//----------------------------------------------------

package Latek;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 05 12:09:01 CET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\005\007\000\002\005\011\000\002\006\003\000" +
    "\002\006\005\000\002\007\003\000\002\007\004\000\002" +
    "\010\010\000\002\011\004\000\002\012\002\000\002\012" +
    "\003\000\002\012\005\000\002\013\005\000\002\014\002" +
    "\000\002\014\004\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\005\000\002\015\006\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\004\000\002\015\007\000\002\015\011\000\002\015\007" +
    "\000\002\016\003\000\002\016\005\000\002\017\003\000" +
    "\002\017\005\000\002\020\003\000\002\020\005\000\002" +
    "\020\006\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\006\000\002\021\003" +
    "\000\002\021\003\000\002\021\005\000\002\021\006\000" +
    "\002\021\006\000\002\021\004\000\002\021\005\000\002" +
    "\022\004\000\002\022\004\000\002\022\003\000\002\023" +
    "\005\000\002\023\003\000\002\024\005\000\002\024\003" +
    "\000\002\025\005\000\002\025\003\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\030\003\000\002\031\002\000\002\031\003\000\002\031" +
    "\005\000\002\032\003\000\002\032\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\213\000\006\036\007\053\006\001\002\000\010\002" +
    "\ufffd\036\007\053\006\001\002\000\004\002\000\001\002" +
    "\000\004\053\214\001\002\000\004\053\014\001\002\000" +
    "\010\002\uffff\036\uffff\053\uffff\001\002\000\004\002\013" +
    "\001\002\000\010\002\ufffe\036\ufffe\053\ufffe\001\002\000" +
    "\004\002\001\001\002\000\006\004\015\040\016\001\002" +
    "\000\004\053\022\001\002\000\004\053\017\001\002\000" +
    "\004\004\020\001\002\000\004\053\022\001\002\000\004" +
    "\005\211\001\002\000\004\053\026\001\002\000\006\005" +
    "\ufff7\053\022\001\002\000\006\005\ufff9\053\ufff9\001\002" +
    "\000\004\005\ufff6\001\002\000\006\006\030\007\027\001" +
    "\002\000\006\010\ufff3\053\032\001\002\000\006\005\ufff8" +
    "\053\ufff8\001\002\000\006\010\ufff2\011\207\001\002\000" +
    "\004\053\206\001\002\000\004\010\034\001\002\000\004" +
    "\004\036\001\002\000\012\002\ufff5\005\ufff5\036\ufff5\053" +
    "\ufff5\001\002\000\042\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\020\uffef\021\uffef\041\uffef\042\uffef\043\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002" +
    "\000\042\004\036\005\066\006\065\007\064\020\061\021" +
    "\056\041\067\042\051\043\047\045\045\046\044\047\043" +
    "\050\040\051\042\052\041\053\046\001\002\000\004\007" +
    "\202\001\002\000\052\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\001\002\000\052\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\001\002" +
    "\000\052\006\uffd8\007\uffd8\010\uffd8\011\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\001\002\000\052\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\001\002\000\030\006" +
    "\200\007\064\020\061\021\056\041\067\043\047\046\044" +
    "\047\043\051\042\052\041\053\101\001\002\000\054\006" +
    "\uffd4\007\uffd4\012\uffdd\013\uffdd\014\uffdd\015\uffd4\016\uffd4" +
    "\020\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\053\170\001\002\000\004\053\166\001\002\000\010\012" +
    "\161\013\160\014\157\001\002\000\004\007\151\001\002" +
    "\000\004\006\150\001\002\000\052\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\001\002\000\044" +
    "\006\uffcc\007\076\015\144\016\143\020\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\001\002\000\044\006" +
    "\uffca\010\uffca\011\uffca\017\uffca\020\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\001\002\000\022\007\064" +
    "\041\067\043\047\046\044\047\043\051\042\052\041\053" +
    "\101\001\002\000\044\006\uffc8\010\uffc8\011\uffc8\017\uffc8" +
    "\020\uffc8\022\uffc8\023\uffc8\024\uffc8\025\136\026\135\027" +
    "\134\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\001\002\000\036\006\uffc6\010\uffc6\011\uffc6\017\uffc6\020" +
    "\131\022\uffc6\023\uffc6\024\130\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\001\002\000\022\007\064\041" +
    "\067\043\047\046\044\047\043\051\042\052\041\053\101" +
    "\001\002\000\032\006\uffc4\010\uffc4\011\uffc4\017\uffc4\022" +
    "\122\023\uffc4\030\121\031\117\032\116\033\125\034\124" +
    "\035\123\001\002\000\014\006\uffc2\010\uffc2\011\uffc2\017" +
    "\uffc2\023\114\001\002\000\026\007\064\020\061\021\056" +
    "\041\067\043\047\046\044\047\043\051\042\052\041\053" +
    "\072\001\002\000\044\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\020\uffed\021\uffed\037\uffed\041\uffed\042\uffed\043\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\001\002\000\050\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\020\ufff0\021\ufff0\036\ufff0\037\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\001\002\000\052\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\001\002\000\044\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\020\uffeb\021\uffeb\037\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\042\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\020\uffee\021\uffee\041\uffee\042" +
    "\uffee\043\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\001\002\000\044\007\uffd4\010\112\015" +
    "\uffd4\016\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\001\002\000\004\010\111\001\002\000\052" +
    "\006\uffcc\007\076\010\uffcc\011\uffcc\015\077\016\075\017" +
    "\uffcc\020\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\001\002\000\026\007\064\020\061\021\056\041\067" +
    "\043\047\046\044\047\043\051\042\052\041\053\101\001" +
    "\002\000\030\007\064\010\uffc0\020\061\021\056\041\067" +
    "\043\047\046\044\047\043\051\042\052\041\053\101\001" +
    "\002\000\004\053\100\001\002\000\052\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002\000" +
    "\052\006\uffd4\007\uffd4\010\uffd4\011\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\001\002\000\006\010\uffbf\011\105\001\002\000" +
    "\004\010\104\001\002\000\052\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\001\002\000\030\007" +
    "\064\010\uffc0\020\061\021\056\041\067\043\047\046\044" +
    "\047\043\051\042\052\041\053\101\001\002\000\004\010" +
    "\uffbe\001\002\000\004\017\110\001\002\000\052\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\001" +
    "\002\000\052\006\uffcf\007\uffcf\010\uffcf\011\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\001\002\000\004\044\113\001\002\000" +
    "\052\006\uffd6\007\uffd6\010\uffd6\011\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\001\002\000\026\007\064\020\061\021\056\041" +
    "\067\043\047\046\044\047\043\051\042\052\041\053\101" +
    "\001\002\000\012\006\uffc3\010\uffc3\011\uffc3\017\uffc3\001" +
    "\002\000\026\007\uffb6\020\uffb6\021\uffb6\041\uffb6\043\uffb6" +
    "\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000" +
    "\026\007\uffb7\020\uffb7\021\uffb7\041\uffb7\043\uffb7\046\uffb7" +
    "\047\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\026\007" +
    "\064\020\061\021\056\041\067\043\047\046\044\047\043" +
    "\051\042\052\041\053\101\001\002\000\026\007\uffb8\020" +
    "\uffb8\021\uffb8\041\uffb8\043\uffb8\046\uffb8\047\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\001\002\000\026\007\064\020\061\021" +
    "\056\041\067\043\047\046\044\047\043\051\042\052\041" +
    "\053\101\001\002\000\026\007\uffb3\020\uffb3\021\uffb3\041" +
    "\uffb3\043\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\001\002\000\026\007\uffb4\020\uffb4\021\uffb4\041\uffb4\043" +
    "\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\001\002" +
    "\000\026\007\uffb5\020\uffb5\021\uffb5\041\uffb5\043\uffb5\046" +
    "\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002\000\014" +
    "\006\uffc5\010\uffc5\011\uffc5\017\uffc5\023\uffc5\001\002\000" +
    "\036\006\uffc7\010\uffc7\011\uffc7\017\uffc7\020\131\022\uffc7" +
    "\023\uffc7\024\130\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\001\002\000\026\007\uffbd\020\uffbd\021\uffbd" +
    "\041\uffbd\043\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\001\002\000\026\007\uffbc\020\uffbc\021\uffbc\041\uffbc" +
    "\043\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\001" +
    "\002\000\026\007\064\020\061\021\056\041\067\043\047" +
    "\046\044\047\043\051\042\052\041\053\101\001\002\000" +
    "\044\006\uffc9\010\uffc9\011\uffc9\017\uffc9\020\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\136\026\135\027\134\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\001\002\000\026" +
    "\007\uffb9\020\uffb9\021\uffb9\041\uffb9\043\uffb9\046\uffb9\047" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002\000\026\007\uffba" +
    "\020\uffba\021\uffba\041\uffba\043\uffba\046\uffba\047\uffba\051" +
    "\uffba\052\uffba\053\uffba\001\002\000\026\007\uffbb\020\uffbb" +
    "\021\uffbb\041\uffbb\043\uffbb\046\uffbb\047\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\001\002\000\026\007\064\020\061\021\056" +
    "\041\067\043\047\046\044\047\043\051\042\052\041\053" +
    "\101\001\002\000\044\006\uffcb\010\uffcb\011\uffcb\017\uffcb" +
    "\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\001\002\000\052\006\uffce\007\076\010\uffce\011\uffce\015" +
    "\077\016\075\017\uffce\020\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\001\002\000\052\006\uffcd\007\076" +
    "\010\uffcd\011\uffcd\015\077\016\075\017\uffcd\020\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\001\002\000" +
    "\026\007\064\020\061\021\056\041\067\043\047\046\044" +
    "\047\043\051\042\052\041\053\101\001\002\000\004\053" +
    "\145\001\002\000\052\006\uffd3\007\uffd3\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffd3\016\uffd3\020\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\001\002\000\004\017\147\001" +
    "\002\000\052\006\uffd2\007\uffd2\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffd2\016\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\001\002\000\044\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\020\uffec\021\uffec\037\uffec\041\uffec\042\uffec" +
    "\043\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\001\002\000\026\007\064\020\061\021\056" +
    "\041\067\043\047\046\044\047\043\051\042\052\041\053" +
    "\101\001\002\000\004\010\153\001\002\000\040\004\036" +
    "\006\065\007\064\020\061\021\056\041\067\042\051\043" +
    "\047\045\045\046\044\047\043\050\040\051\042\052\041" +
    "\053\046\001\002\000\044\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\020\uffe4\021\uffe4\037\155\041\uffe4\042\uffe4\043\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\001\002\000\040\004\036\006\065\007\064\020\061" +
    "\021\056\041\067\042\051\043\047\045\045\046\044\047" +
    "\043\050\040\051\042\052\041\053\046\001\002\000\044" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\020\uffe3\021\uffe3\037" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000\004\006" +
    "\165\001\002\000\004\006\164\001\002\000\026\007\064" +
    "\020\061\021\056\041\067\043\047\046\044\047\043\051" +
    "\042\052\041\053\101\001\002\000\004\006\163\001\002" +
    "\000\044\004\uffe9\005\uffe9\006\uffe9\007\uffe9\020\uffe9\021" +
    "\uffe9\037\uffe9\041\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\001\002\000" +
    "\044\004\uffe8\005\uffe8\006\uffe8\007\uffe8\020\uffe8\021\uffe8" +
    "\037\uffe8\041\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\001\002\000\044" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\020\uffe7\021\uffe7\037" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\001\002\000\052\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\001\002\000\006\006\uffdf\011\175\001\002\000\010\006" +
    "\uffe1\011\uffe1\012\173\001\002\000\004\006\172\001\002" +
    "\000\044\004\uffea\005\uffea\006\uffea\007\uffea\020\uffea\021" +
    "\uffea\037\uffea\041\uffea\042\uffea\043\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001\002\000" +
    "\026\007\064\020\061\021\056\041\067\043\047\046\044" +
    "\047\043\051\042\052\041\053\101\001\002\000\006\006" +
    "\uffe0\011\uffe0\001\002\000\004\053\170\001\002\000\004" +
    "\006\uffde\001\002\000\004\006\201\001\002\000\044\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\020\uffe5\021\uffe5\037\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002\000\044\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\020\uffe6\021\uffe6\037\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\001\002\000\026\007\064\020" +
    "\061\021\056\041\067\043\047\046\044\047\043\051\042" +
    "\052\041\053\101\001\002\000\004\010\204\001\002\000" +
    "\040\004\036\006\065\007\064\020\061\021\056\041\067" +
    "\042\051\043\047\045\045\046\044\047\043\050\040\051" +
    "\042\052\041\053\046\001\002\000\044\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\020\uffe2\021\uffe2\037\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\001\002\000\006\010\ufff4\011\ufff4\001" +
    "\002\000\006\010\ufff3\053\032\001\002\000\004\010\ufff1" +
    "\001\002\000\010\002\ufffa\036\ufffa\053\ufffa\001\002\000" +
    "\004\005\213\001\002\000\010\002\ufffb\036\ufffb\053\ufffb" +
    "\001\002\000\004\007\027\001\002\000\004\002\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\213\000\014\002\010\003\003\004\004\005\011\010" +
    "\007\001\001\000\012\003\003\004\214\005\011\010\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\022\007" +
    "\211\010\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\022\007\020\010\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\022\007\024\010\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\030\012\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\034\001\001\000\002\001\001\000\004\014\036" +
    "\001\001\000\030\013\067\015\070\020\047\021\052\022" +
    "\054\023\056\024\057\025\061\026\062\027\051\030\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\052" +
    "\022\054\023\056\024\057\025\061\026\062\027\176\030" +
    "\073\001\001\000\006\016\166\017\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\052\030\141\001\001\000\004\033\136\001" +
    "\001\000\004\032\131\001\001\000\006\021\052\030\140" +
    "\001\001\000\004\034\117\001\001\000\002\001\001\000" +
    "\022\021\052\022\054\023\056\024\057\025\061\026\062" +
    "\027\072\030\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\052\022\054\023\056\024\057\025\061\026\062" +
    "\027\106\030\073\001\001\000\024\021\052\022\054\023" +
    "\056\024\057\025\061\026\062\027\101\030\073\031\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\021\052\022\054\023\056\024\057\025\061\026" +
    "\062\027\101\030\073\031\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\052\022\054" +
    "\023\056\024\057\025\061\026\062\027\114\030\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\052\022\054\023\056\024\126\030\073\001" +
    "\001\000\002\001\001\000\020\021\052\022\054\023\056" +
    "\024\057\025\061\026\125\030\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\052\022\054\023\132\030\073\001\001" +
    "\000\004\033\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\052\022\137\030\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\052\022\054\023\056\024\057\025\061" +
    "\026\062\027\145\030\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\052\022\054\023\056\024\057\025" +
    "\061\026\062\027\151\030\073\001\001\000\002\001\001" +
    "\000\030\013\067\015\153\020\047\021\052\022\054\023" +
    "\056\024\057\025\061\026\062\027\051\030\053\001\001" +
    "\000\002\001\001\000\030\013\067\015\155\020\047\021" +
    "\052\022\054\023\056\024\057\025\061\026\062\027\051" +
    "\030\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\052\022\054\023\056\024\057" +
    "\025\061\026\062\027\161\030\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\052\022\054" +
    "\023\056\024\057\025\061\026\062\027\173\030\073\001" +
    "\001\000\002\001\001\000\006\016\166\017\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\052\022\054\023\056\024\057" +
    "\025\061\026\062\027\202\030\073\001\001\000\002\001" +
    "\001\000\030\013\067\015\204\020\047\021\052\022\054" +
    "\023\056\024\057\025\061\026\062\027\051\030\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\030" +
    "\012\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Latek.Language.LangProgram pLangProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Latek.Language.LangProgram) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	//report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new ParseException("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LangOpRel ::= _SYMB_25
            {
              Latek.Language.LangOpRel RESULT =null;
		 RESULT = new Latek.Language.LangRel_NE();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpRel",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LangOpRel ::= _SYMB_24
            {
              Latek.Language.LangOpRel RESULT =null;
		 RESULT = new Latek.Language.LangRel_EQ();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpRel",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LangOpRel ::= _SYMB_23
            {
              Latek.Language.LangOpRel RESULT =null;
		 RESULT = new Latek.Language.LangRel_GE();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpRel",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LangOpRel ::= _SYMB_22
            {
              Latek.Language.LangOpRel RESULT =null;
		 RESULT = new Latek.Language.LangRel_GT();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpRel",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LangOpRel ::= _SYMB_21
            {
              Latek.Language.LangOpRel RESULT =null;
		 RESULT = new Latek.Language.LangRel_LE();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpRel",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LangOpRel ::= _SYMB_20
            {
              Latek.Language.LangOpRel RESULT =null;
		 RESULT = new Latek.Language.LangRel_LT();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpRel",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LangOpMul ::= _SYMB_19
            {
              Latek.Language.LangOpMul RESULT =null;
		 RESULT = new Latek.Language.LangOpMul_Mod();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpMul",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LangOpMul ::= _SYMB_18
            {
              Latek.Language.LangOpMul RESULT =null;
		 RESULT = new Latek.Language.LangOpMul_Div();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpMul",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LangOpMul ::= _SYMB_17
            {
              Latek.Language.LangOpMul RESULT =null;
		 RESULT = new Latek.Language.LangOpMul_Mul();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpMul",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LangOpAdd ::= _SYMB_12
            {
              Latek.Language.LangOpAdd RESULT =null;
		 RESULT = new Latek.Language.LangOpAdd_Sub();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpAdd",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LangOpAdd ::= _SYMB_16
            {
              Latek.Language.LangOpAdd RESULT =null;
		 RESULT = new Latek.Language.LangOpAdd_Add();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangOpAdd",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListLangExp ::= LangExp _SYMB_5 ListLangExp
            {
              Latek.Language.ListLangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.ListLangExp p_3 = (Latek.Language.ListLangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangExp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListLangExp ::= LangExp
            {
              Latek.Language.ListLangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.ListLangExp(); RESULT.addLast(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangExp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListLangExp ::=
            {
              Latek.Language.ListLangExp RESULT =null;
		 RESULT = new Latek.Language.ListLangExp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangExp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LangExp6 ::= LangExp7
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp6",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LangExp ::= LangExp1
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LangExp ::= LangExp1 _SYMB_15 LangExp
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_Or(p_1,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LangExp1 ::= LangExp2
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp1",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LangExp1 ::= LangExp2 _SYMB_14 LangExp1
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_And(p_1,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp1",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LangExp2 ::= LangExp3
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp2",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LangExp2 ::= LangExp2 LangOpRel LangExp3
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangOpRel p_2 = (Latek.Language.LangOpRel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_Rel(p_1,p_2,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp2",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LangExp3 ::= LangExp4
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp3",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LangExp3 ::= LangExp3 LangOpAdd LangExp4
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangOpAdd p_2 = (Latek.Language.LangOpAdd)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_Add(p_1,p_2,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp3",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LangExp4 ::= LangExp5
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp4",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LangExp4 ::= LangExp4 LangOpMul LangExp5
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangOpMul p_2 = (Latek.Language.LangOpMul)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_Mul(p_1,p_2,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp4",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LangExp5 ::= LangExp6
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LangExp5 ::= _SYMB_13 LangExp6
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_2 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_Not(p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LangExp5 ::= _SYMB_12 LangExp6
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_2 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_Negation(p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LangExp7 ::= _SYMB_3 LangExp _SYMB_4
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_2 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LangExp7 ::= _SYMB_31 _IDENT_
            {
              Latek.Language.LangExp RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_New(p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LangExp7 ::= LangExp6 _SYMB_3 ListLangExp _SYMB_4
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latek.Language.ListLangExp p_3 = (Latek.Language.ListLangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangExp_Call(p_1,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LangExp7 ::= LangExp6 _SYMB_10 LangExp _SYMB_11
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangExp_Array(p_1,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LangExp7 ::= LangExp6 _SYMB_9 _IDENT_
            {
              Latek.Language.LangExp RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_Member(p_1,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LangExp7 ::= _IDENT_
            {
              Latek.Language.LangExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_Variable(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LangExp7 ::= _SYMB_34
            {
              Latek.Language.LangExp RESULT =null;
		 RESULT = new Latek.Language.LangExp_This();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LangExp7 ::= _SYMB_3 _IDENT_ _SYMB_4 _SYMB_32
            {
              Latek.Language.LangExp RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Latek.Language.LangExp_LitNull(p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LangExp7 ::= _SYMB_29
            {
              Latek.Language.LangExp RESULT =null;
		 RESULT = new Latek.Language.LangExp_LitFalse();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LangExp7 ::= _SYMB_35
            {
              Latek.Language.LangExp RESULT =null;
		 RESULT = new Latek.Language.LangExp_LitTrue();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LangExp7 ::= _STRING_
            {
              Latek.Language.LangExp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_LitString(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LangExp7 ::= _INTEGER_
            {
              Latek.Language.LangExp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangExp_LitInt(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangExp7",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LangLValue ::= LangExp6 _SYMB_10 LangExp _SYMB_11
            {
              Latek.Language.LangLValue RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangLValue_Array(p_1,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangLValue",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LangLValue ::= LangExp6 _SYMB_9 _IDENT_
            {
              Latek.Language.LangLValue RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangLValue_Member(p_1,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangLValue",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LangLValue ::= _IDENT_
            {
              Latek.Language.LangLValue RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangLValue_Variable(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangLValue",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListLangVarDeclaration ::= LangVarDeclaration _SYMB_5 ListLangVarDeclaration
            {
              Latek.Language.ListLangVarDeclaration RESULT =null;
		Latek.Language.LangVarDeclaration p_1 = (Latek.Language.LangVarDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.ListLangVarDeclaration p_3 = (Latek.Language.ListLangVarDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangVarDeclaration",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListLangVarDeclaration ::= LangVarDeclaration
            {
              Latek.Language.ListLangVarDeclaration RESULT =null;
		Latek.Language.LangVarDeclaration p_1 = (Latek.Language.LangVarDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.ListLangVarDeclaration(); RESULT.addLast(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangVarDeclaration",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LangVarDeclaration ::= _IDENT_ _SYMB_6 LangExp
            {
              Latek.Language.LangVarDeclaration RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangVarDeclaration_NoInit(p_1,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangVarDeclaration",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LangVarDeclaration ::= _IDENT_
            {
              Latek.Language.LangVarDeclaration RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangVarDeclaration_Init(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangVarDeclaration",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LangStmt ::= _SYMB_36 _SYMB_3 LangExp _SYMB_4 LangStmt
            {
              Latek.Language.LangStmt RESULT =null;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangStmt p_5 = (Latek.Language.LangStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangStmt_While(p_3,p_5);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LangStmt ::= _SYMB_30 _SYMB_3 LangExp _SYMB_4 LangStmt _SYMB_27 LangStmt
            {
              Latek.Language.LangStmt RESULT =null;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Latek.Language.LangStmt p_5 = (Latek.Language.LangStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangStmt p_7 = (Latek.Language.LangStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangStmt_IfElse(p_3,p_5,p_7);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LangStmt ::= _SYMB_30 _SYMB_3 LangExp _SYMB_4 LangStmt
            {
              Latek.Language.LangStmt RESULT =null;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangStmt p_5 = (Latek.Language.LangStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangStmt_If(p_3,p_5);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LangStmt ::= _SYMB_33 _SYMB_2
            {
              Latek.Language.LangStmt RESULT =null;
		 RESULT = new Latek.Language.LangStmt_ReturnNothing();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LangStmt ::= _SYMB_33 LangExp _SYMB_2
            {
              Latek.Language.LangStmt RESULT =null;
		Latek.Language.LangExp p_2 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangStmt_Return(p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LangStmt ::= LangLValue _SYMB_8 _SYMB_2
            {
              Latek.Language.LangStmt RESULT =null;
		Latek.Language.LangLValue p_1 = (Latek.Language.LangLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Latek.Language.LangStmt_SubOne(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LangStmt ::= LangLValue _SYMB_7 _SYMB_2
            {
              Latek.Language.LangStmt RESULT =null;
		Latek.Language.LangLValue p_1 = (Latek.Language.LangLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Latek.Language.LangStmt_AddOne(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LangStmt ::= LangLValue _SYMB_6 LangExp _SYMB_2
            {
              Latek.Language.LangStmt RESULT =null;
		Latek.Language.LangLValue p_1 = (Latek.Language.LangLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latek.Language.LangExp p_3 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangStmt_Assign(p_1,p_3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LangStmt ::= _IDENT_ ListLangVarDeclaration _SYMB_2
            {
              Latek.Language.LangStmt RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.ListLangVarDeclaration p_2 = (Latek.Language.ListLangVarDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangStmt_Declaration(p_1,p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LangStmt ::= LangFuncBlock
            {
              Latek.Language.LangStmt RESULT =null;
		Latek.Language.LangFuncBlock p_1 = (Latek.Language.LangFuncBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangStmt_Block(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LangStmt ::= LangExp _SYMB_2
            {
              Latek.Language.LangStmt RESULT =null;
		Latek.Language.LangExp p_1 = (Latek.Language.LangExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangStmt_Value(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LangStmt ::= _SYMB_2
            {
              Latek.Language.LangStmt RESULT =null;
		 RESULT = new Latek.Language.LangStmt_Empty();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangStmt",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListLangStmt ::= ListLangStmt LangStmt
            {
              Latek.Language.ListLangStmt RESULT =null;
		Latek.Language.ListLangStmt p_1 = (Latek.Language.ListLangStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latek.Language.LangStmt p_2 = (Latek.Language.LangStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangStmt",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListLangStmt ::=
            {
              Latek.Language.ListLangStmt RESULT =null;
		 RESULT = new Latek.Language.ListLangStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangStmt",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LangFuncBlock ::= _SYMB_0 ListLangStmt _SYMB_1
            {
              Latek.Language.LangFuncBlock RESULT =null;
		Latek.Language.ListLangStmt p_2 = (Latek.Language.ListLangStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangFuncBlock(p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangFuncBlock",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListLangArgument ::= LangArgument _SYMB_5 ListLangArgument
            {
              Latek.Language.ListLangArgument RESULT =null;
		Latek.Language.LangArgument p_1 = (Latek.Language.LangArgument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.ListLangArgument p_3 = (Latek.Language.ListLangArgument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangArgument",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ListLangArgument ::= LangArgument
            {
              Latek.Language.ListLangArgument RESULT =null;
		Latek.Language.LangArgument p_1 = (Latek.Language.LangArgument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.ListLangArgument(); RESULT.addLast(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangArgument",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListLangArgument ::=
            {
              Latek.Language.ListLangArgument RESULT =null;
		 RESULT = new Latek.Language.ListLangArgument();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangArgument",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LangArgument ::= _IDENT_ _IDENT_
            {
              Latek.Language.LangArgument RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangArgument(p_1,p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangArgument",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LangFuncDef ::= _IDENT_ _IDENT_ _SYMB_3 ListLangArgument _SYMB_4 LangFuncBlock
            {
              Latek.Language.LangFuncDef RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Latek.Language.ListLangArgument p_4 = (Latek.Language.ListLangArgument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Latek.Language.LangFuncBlock p_6 = (Latek.Language.LangFuncBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangFuncDef(p_1,p_2,p_4,p_6);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangFuncDef",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListLangClassDefMember ::= LangClassDefMember ListLangClassDefMember
            {
              Latek.Language.ListLangClassDefMember RESULT =null;
		Latek.Language.LangClassDefMember p_1 = (Latek.Language.LangClassDefMember)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latek.Language.ListLangClassDefMember p_2 = (Latek.Language.ListLangClassDefMember)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangClassDefMember",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListLangClassDefMember ::= LangClassDefMember
            {
              Latek.Language.ListLangClassDefMember RESULT =null;
		Latek.Language.LangClassDefMember p_1 = (Latek.Language.LangClassDefMember)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.ListLangClassDefMember(); RESULT.addLast(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangClassDefMember",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LangClassDefMember ::= _IDENT_ _IDENT_ _SYMB_2
            {
              Latek.Language.LangClassDefMember RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangClassDefMember_Field(p_1,p_2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangClassDefMember",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LangClassDefMember ::= LangFuncDef
            {
              Latek.Language.LangClassDefMember RESULT =null;
		Latek.Language.LangFuncDef p_1 = (Latek.Language.LangFuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangClassDefMember_Method(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangClassDefMember",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LangClassDef ::= _SYMB_26 _IDENT_ _SYMB_28 _IDENT_ _SYMB_0 ListLangClassDefMember _SYMB_1
            {
              Latek.Language.LangClassDef RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latek.Language.ListLangClassDefMember p_6 = (Latek.Language.ListLangClassDefMember)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangClassDef_SubClass(p_2,p_4,p_6);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangClassDef",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LangClassDef ::= _SYMB_26 _IDENT_ _SYMB_0 ListLangClassDefMember _SYMB_1
            {
              Latek.Language.LangClassDef RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Latek.Language.ListLangClassDefMember p_4 = (Latek.Language.ListLangClassDefMember)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Latek.Language.LangClassDef_BaseClass(p_2,p_4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangClassDef",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListLangTopDef ::= LangTopDef ListLangTopDef
            {
              Latek.Language.ListLangTopDef RESULT =null;
		Latek.Language.LangTopDef p_1 = (Latek.Language.LangTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Latek.Language.ListLangTopDef p_2 = (Latek.Language.ListLangTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangTopDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListLangTopDef ::= LangTopDef
            {
              Latek.Language.ListLangTopDef RESULT =null;
		Latek.Language.LangTopDef p_1 = (Latek.Language.LangTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.ListLangTopDef(); RESULT.addLast(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLangTopDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LangTopDef ::= LangClassDef
            {
              Latek.Language.LangTopDef RESULT =null;
		Latek.Language.LangClassDef p_1 = (Latek.Language.LangClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangTopDef_Class(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangTopDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LangTopDef ::= LangFuncDef
            {
              Latek.Language.LangTopDef RESULT =null;
		Latek.Language.LangFuncDef p_1 = (Latek.Language.LangFuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangTopDef_Function(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangTopDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LangProgram ::= ListLangTopDef
            {
              Latek.Language.LangProgram RESULT =null;
		Latek.Language.ListLangTopDef p_1 = (Latek.Language.ListLangTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Latek.Language.LangProgram(p_1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LangProgram",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LangProgram EOF
            {
              Object RESULT =null;
		Latek.Language.LangProgram start_val = (Latek.Language.LangProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new ParseException(
               "Invalid action number found in internal parse table");

        }
    }
}

